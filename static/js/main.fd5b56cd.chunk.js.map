{"version":3,"sources":["context/Wallet.js","contracts/useContract.js","utils.js","context/App.js","components/yourNFTOptions/modals/transferModal.js","components/yourNFTOptions/modals/exerciseModal.js","components/yourNFTOptions/modals/autoExerciseModal.js","components/yourNFTOptions/modals/detokenizeModal.js","components/yourNFTOptions/NFTItem.js","components/yourNFTOptions/NFTList.js","components/yourOptions/optionItem.js","components/yourOptions/optionsList.js","components/tokenizer/index.js","components/optionSeller/index.js","components/yourNFTOptions/index.js","components/dashboard.js","components/header.js","components/intro.js","components/footer.js","connectors.js","components/statusMsg/index.js","App.js","hooks.js","serviceWorker.js","index.js"],"names":["WalletContext","createContext","context","balances","allowances","poolConditions","profits","connect","disconnect","AGGREGATORV3INTERFACE_ABI","getContract","address","ABI","library","account","ethers","Contract","getSigner","useContract","withSignerIfPossible","useWeb3React","useMemo","undefined","error","console","useHegicETHOptionsContract","HEGIC_OPTIONS_ETH_ABI","useHegicWBTCOptionsContract","HEGIC_OPTIONS_WBTC_ABI","useHegicETHOptionsNFTContract","HEGIC_ETH_OPTIONS_NFT_ABI","useHegicWBTCOptionsNFTContract","HEGIC_WBTC_OPTIONS_NFT_ABI","useHegicBotContract","HEGIC_BOT_ABI","useWBTCUSDContract","useETHUSDContract","truncateEtherValue","str","maxDecimalDigits","includes","parts","split","slice","formatBN","bn","utils","commify","formatEther","toString","timeToMaturity","expiration","seconds","toNumber","Date","getTime","days","Math","floor","hrs","AppContext","statusMsgTitle","statusMsg","updateStatusMsg","updateAndWait","updateData","reload","TransferModal","props","tokenId","app","useContext","ethNFTOptions","wbtcNFTOptions","nftProvider","provider","useState","transferButtonDisabled","setTransferButtonDisabled","destinationAddress","setDestinationAddress","useEffect","isAddress","transferToken","a","log","transferFrom","txRequest","Modal","isOpen","modal","toggle","ModalHeader","ModalBody","InputGroup","size","InputGroupAddon","addonType","InputGroupText","Input","placeholder","value","onChange","event","target","Button","className","style","height","width","disabled","onClick","ModalFooter","ExerciseModal","asset","currentProfit","exerciseButtonDisabled","setExerciseButtonDisabled","exercise","exerciseOption","minWidth","currentPrice","id","AutoExerciseModal","hegicBot","decimals","autoExerciseButtonDisabled","setAutoExerciseButtonDisabled","hegicBotApproved","setHegicBotApproved","targetPrice","setTargetPrice","expectedProfit","setExpectedProfit","checkHegicBotApproved","calculateProfit","isApprovedForAll","getUnderlyingOptionParams","underlyingOptionParams","strike","amount","formatUnits","optionType","profit","tp","lockedAmount","addToAutoExercise","track","parseUnits","approveOperator","setApprovalForAll","Alert","textAlign","color","marginTop","DetokenizeModal","detokenize","burn","detokenizeOption","Row","Col","md","offset","NFTItem","wbtcOptions","ethOptions","ethusdPriceProvider","wbtcusdPriceProvider","optionsProvider","priceProvider","setUnderlyingOptionParams","setAmount","setStrike","setExpiration","isValid","setIsValid","setCurrentProfit","setCurrentPrice","optionId","setOptionId","setOptionType","owner","setOwner","retrieveOptionParams","getOwner","getCurrentProfit","ownerOf","latestRoundData","then","x","answer","cp","uop","getUnderlyingOptionId","holder","transferOwnership","transfer","showTransferModal","setShowTransferModal","showExerciseModal","setShowExerciseModal","showAutoExerciseModal","setShowAutoExerciseModal","showDetokenizeModal","setShowDetokenizeModal","toggleExercise","toggleAutoExercise","toggleTransfer","toggleDetokenize","untrackToken","untrack","trackedTokenId","scope","state","href","NFTList","wallet","chainId","rows","setRows","updateRows","options","Promise","all","nft","map","o","key","index","optionItems","length","Table","fontSize","margin","OptionItem","tokenize","tokenizeOption","UncontrolledTooltip","placement","OptionsList","hegic","push","TokenizerModal","Tokenizer","showTokenizerModal","setShowTokenizerModal","toggleTokenizer","OptionSellerModal","setAsset","setSize","period","setPeriod","setPriceProvider","optionCost","setOptionCost","isBuyButtonDisabled","setIsBuyButtonDisabled","updateCurrentPrice","getOptionCost","_optionsProvider","_optionType","BigNumber","from","_size","_strike","_period","getOptionCostETH","buyOption","createOption","type","OptionSeller","showOptionSellerModal","setShowOptionSellerModal","toggleOptionSeller","YourNFTOptions","Card","body","padding","minHeight","maxHeight","Dashboard","Container","paddingBottom","paddingTop","marginBottom","Header","active","nftETHOptions","nftWBTCOptions","hegicBotETH","updateMyOptions","myOptions","alreadyInOptionIds","optionProviders","op","filter","filters","Create","queryFilter","events","args","option","nftOptionProviders","nop","filter2","Detokenized","events2","setValue","updateMyNFTOptions","myNFTOptions","np","balanceOf","ownedTokens","tokenOfOwnerByIndex","hegicBots","hb","TokenTracked","trackedTokens","trackedToken","getBalance","balance","ETHBalance","Wallet","sm","display","justifyContent","zIndex","fontFamily","fontWeight","Badge","HEGICBalance","len","substring","truncateAddress","Navbar","backgroundColor","borderBottom","Intro","lineHeight","textTransform","letterSpacing","background","borderImageSource","borderImageSlice","borderStyle","boxSizing","borderRadius","borderImageWidth","Footer","position","flexDirection","verticalAlign","injected","InjectedConnector","supportedChainIds","StatusMsg","Toast","ToastHeader","icon","Spinner","ToastBody","getLibrary","connector","providers","Web3Provider","App","setETHBalance","setHEGICBalance","HEGICAllowance","setHEGICAllowance","setMyOptions","myNFT","setMyNFT","setStatusMsg","setStatusMsgTitle","setReload","activate","deactivate","activatingConnector","setActivatingConnector","suppress","ethereum","window","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","catch","useEagerConnect","title","message","hash","wait","Provider","backgroundImage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","src","data-site","defer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd5b56cd.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst WalletContext = createContext(\n    {\n        context: {},\n        balances: {},\n        allowances: {},\n        poolConditions: {},\n        profits: {},\n        connect: () => {},\n        disconnect: () => {}\n    });\n\nexport {\n    WalletContext\n};\n\n","import { useWeb3React } from '@web3-react/core'\nimport { useMemo } from 'react'\nimport { ethers } from 'ethers'\n\nimport { abi as HEGIC_WBTC_OPTIONS_NFT_ABI } from './json/HegicERC20OptionsNFT.json'\nimport { abi as HEGIC_ETH_OPTIONS_NFT_ABI } from './json/HegicETHOptionsNFT.json'\nimport { abi as HEGIC_OPTIONS_WBTC_ABI } from './json/FakeHegicWBTCOptions.json'\nimport { abi as HEGIC_OPTIONS_ETH_ABI } from './json/FakeHegicETHOptions.json'\nimport { abi as HEGIC_BOT_ABI } from './json/HegicBot.json'\nimport { abi as HEGIC_ABI } from './json/FakeHEGIC.json'\nimport { abi as WBTC_ABI } from './json/FakeWBTC.json'\nconst AGGREGATORV3INTERFACE_ABI = [{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\n\n//mainnet contracts\nconst ETHUSD_ADDRESS = \"0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\";\nconst WBTCUSD_ADDRESS = \"0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c\";\nconst HEGIC_ETH_OPTIONS_NFT_ADDRESS = \"0xE302E3083C2A04c90995E823b83B89925E0B8CD9\";\nconst HEGIC_WBTC_OPTIONS_NFT_ADDRESS = \"0x6da28Db16ecB33C2468FF934CD3A3447c588309A\";\nconst HEGIC_OPTIONS_WBTC_ADDRESS = \"0x3961245DB602eD7c03eECcda33eA3846bD8723BD\";\nconst HEGIC_OPTIONS_ETH_ADDRESS = \"0xEfC0eEAdC1132A12c9487d800112693bf49EcfA2\";\nconst HEGIC_ADDRESS = '0x584bC13c7D411c00c01A62e8019472dE68768430';\nconst HEGIC_BOT_ADDRESS = '0x36A1B65460ceFcAC1F55f92A2E4F05A8D613fe93';\nconst WBTC_ADDRESS = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599';\n\n//rinkeby contracts\n// const ETHUSD_ADDRESS = \"0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\";\n// const WBTCUSD_ADDRESS = \"0xECe365B379E1dD183B20fc5f022230C044d51404\";\n// const HEGIC_ETH_OPTIONS_NFT_ADDRESS = \"0x230525E7ccF8e79127764b12888Da542D3309AD1\";\n// const HEGIC_WBTC_OPTIONS_NFT_ADDRESS = \"0x3f910ca1093D5f31AA778fA355FA05280D2D0419\";\n// const HEGIC_OPTIONS_WBTC_ADDRESS = \"0x3A97B5d06593AC649E25850Ab47121d96832041F\";\n// const HEGIC_OPTIONS_ETH_ADDRESS = \"0xC5c5aF6Fc7afd67C1C6bE5b306CC9b59cbc77583\";\n// const HEGIC_ADDRESS = '0x584bC13c7D411c00c01A62e8019472dE68768430'\n// const WBTC_ADDRESS = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599'\n\n// returns null on errors\nfunction getContract(address, ABI, library, account) {\n    return new ethers.Contract(address, ABI, library.getSigner(account))\n}\n\nfunction useContract(address, ABI, withSignerIfPossible = true) {\n  const { library, account } = useWeb3React()\n\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null\n    try {\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n    } catch (error) {\n      console.error('Failed to get contract', error)\n      return null\n    }\n  }, [address, ABI, library, withSignerIfPossible, account])\n} \n\nexport function useHegicETHOptionsContract() {\n  return useContract(HEGIC_OPTIONS_ETH_ADDRESS, HEGIC_OPTIONS_ETH_ABI);\n}\n\nexport function useHegicWBTCOptionsContract() {\n  return useContract(HEGIC_OPTIONS_WBTC_ADDRESS, HEGIC_OPTIONS_WBTC_ABI);\n}\n\nexport function useHegicETHOptionsNFTContract() {\n  return useContract(HEGIC_ETH_OPTIONS_NFT_ADDRESS, HEGIC_ETH_OPTIONS_NFT_ABI);\n}\n\nexport function useHegicWBTCOptionsNFTContract() {\n  return useContract(HEGIC_WBTC_OPTIONS_NFT_ADDRESS, HEGIC_WBTC_OPTIONS_NFT_ABI);\n}\n\nexport function useHegicBotContract() {\n  return useContract(HEGIC_BOT_ADDRESS, HEGIC_BOT_ABI);\n}\n\nexport function useHegicContract() {\n  return useContract(HEGIC_ADDRESS, HEGIC_ABI);\n}\n\nexport function useWBTCContract() {\n  return useContract(WBTC_ADDRESS, WBTC_ABI);\n}\n\nexport function useWBTCUSDContract() {\n  return useContract(WBTCUSD_ADDRESS, AGGREGATORV3INTERFACE_ABI);\n}\n\nexport function useETHUSDContract() {\n  return useContract(ETHUSD_ADDRESS, AGGREGATORV3INTERFACE_ABI);\n}","import { ethers } from 'ethers'\n\nconst truncateEtherValue = (str, maxDecimalDigits) => {\n    if (str.includes(\".\")) {\n    const parts = str.split(\".\");\n    return parts[0] + \".\" + parts[1].slice(0, maxDecimalDigits);\n    }\n    return str;\n};\n\nconst formatBN = (bn) => {\n    return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n}\n\nconst truncateAddress = (str) => {\n    const len = str.length;\n    return str.substring(0, 3) + '...' + str.substring(len-4, len-1);\n}\n\nconst timeToMaturity = (expiration) => {\n    if(!expiration) return 0;\n    let seconds = expiration.toNumber() - new Date().getTime()/1000;\n    if(seconds < 0) return \"EXPIRED\";\n    const days = Math.floor(seconds / (3600*24));\n    seconds  -= days*3600*24;\n    const hrs   = Math.floor(seconds / 3600);\n    seconds  -= hrs*3600;\n    return days+'d '+hrs+'h';\n}\n\nconst Asset = {Invalid: 0, WBTC: 1, ETH: 2}\nconst OptionType = {Invalid: 0, Put: 1, Call: 2}\n\nexport {\n    truncateEtherValue,\n    formatBN, \n    truncateAddress,\n    Asset,\n    OptionType,\n    timeToMaturity\n}","import { createContext } from 'react';\n\nconst AppContext = createContext({\n    statusMsgTitle: \"\",\n    statusMsg: \"\",\n    updateStatusMsg: () => {},\n    updateAndWait: () => {},\n    updateData: () => {},\n    reload: false\n})\n\nexport {\n    AppContext\n};","import React, { useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { useHegicETHOptionsNFTContract, useHegicWBTCOptionsNFTContract } from '../../../contracts/useContract';\nimport { Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { AppContext } from '../../../context/App';\nimport { WalletContext } from '../../../context/Wallet';\n\nfunction TransferModal(props) {\n    const tokenId = props.tokenId;\n    const app = useContext(AppContext);\n    const wallet = useContext(WalletContext);\n    const {account} = wallet.context;\n\n    const ethNFTOptions = useHegicETHOptionsNFTContract();\n    const wbtcNFTOptions = useHegicWBTCOptionsNFTContract();\n    \n    const asset = props.provider == wbtcNFTOptions.address ? \"WBTC\" : \"ETH\";\n    const nftProvider = props.provider == wbtcNFTOptions.address ? wbtcNFTOptions : ethNFTOptions;\n\n    const [transferButtonDisabled, setTransferButtonDisabled] = useState(true);\n    const [destinationAddress, setDestinationAddress] = useState('');\n\n    useEffect(() => {\n        setTransferButtonDisabled(!ethers.utils.isAddress(destinationAddress))\n    }, [destinationAddress]);\n\n    const transferToken = async () => {\n        console.log(account, destinationAddress, tokenId);\n        const txRequest = await nftProvider.transferFrom(account, destinationAddress, tokenId);\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Transfer Token\");\n    }\n    \n    return (\n        <>\n            <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader><h4>Transfer Option</h4></ModalHeader>\n            <ModalBody>\n                This will transfer the token holding the option to the receiver's address.\n                        <InputGroup size=\"sm\">\n                            <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>RECEIVER</InputGroupText>\n                            </InputGroupAddon>  \n                                <Input placeholder=\"0x0000000000000000000000000000000000000000\" value={destinationAddress} onChange={(event) => setDestinationAddress(event.target.value)} />\n                        </InputGroup>\n                        <Button size=\"sm\" className=\"main-button\" style={{height:'100%', width:'100%'}} disabled={transferButtonDisabled} onClick={async () => transferToken()}>TRANSFER</Button>\n            </ModalBody>\n            <ModalFooter>\n                    <Button className=\"secondary-button\" onClick={props.toggle}>CLOSE</Button>\n            </ModalFooter>\n            </Modal>\n        </>\n    )\n}\n\nexport default TransferModal;","import React, { useContext, useState, useEffect } from 'react';\nimport { useHegicETHOptionsNFTContract, useHegicWBTCOptionsNFTContract } from '../../../contracts/useContract';\nimport { Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { AppContext } from '../../../context/App';\nimport { timeToMaturity, truncateEtherValue } from '../../../utils';\nimport { ethers } from 'ethers';\n\nfunction ExerciseModal(props) {\n    const app = useContext(AppContext);\n\n    const ethNFTOptions = useHegicETHOptionsNFTContract();\n    const wbtcNFTOptions = useHegicWBTCOptionsNFTContract();\n    \n    const asset = props.provider == wbtcNFTOptions.address ? \"WBTC\" : \"ETH\";\n    const nftProvider = props.provider == wbtcNFTOptions.address ? wbtcNFTOptions : ethNFTOptions;\n\n    const [exerciseButtonDisabled, setExerciseButtonDisabled] = useState(props.currentProfit <= 0);\n\n    const exercise = async () => {\n        const txRequest = await nftProvider.exerciseOption(props.tokenId);\n        props.toggle()\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Exercise Option\");\n\n    }\n    \n    useEffect(() => {\n        setExerciseButtonDisabled((props.currentProfit <= 0) || timeToMaturity(props.expiration) == 'EXPIRED');\n    }, [props.currentProfit, props.expiration])\n\n    return (\n        <>\n            <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader><h4>Exercise Option</h4></ModalHeader>\n            <ModalBody>\n                Once you exercise the option, you will realize its P&L.\n                <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>EXPIRES IN</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input value={timeToMaturity(props.expiration)} disabled />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>{asset} PRICE (USD)</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input value={truncateEtherValue((props.currentPrice/1e8).toString(), 2)} disabled />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>CURRENT P&L ({asset})</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input value={truncateEtherValue(props.currentProfit.toString(), 4)} disabled />\n                </InputGroup>\n                <Button size=\"sm\" className=\"main-button\" id=\"exerciseButton\" style={{height:'100%', width:'100%'}} disabled = {exerciseButtonDisabled} onClick={async () => await exercise()}>EXERCISE</Button>\n            </ModalBody>\n            <ModalFooter>\n                    <Button className=\"secondary-button\" onClick={props.toggle}>CLOSE</Button>\n            </ModalFooter>\n            </Modal>\n        </>\n    )\n}\n\nexport default ExerciseModal;","import React, { useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { useHegicBotContract, useHegicETHOptionsNFTContract, useHegicWBTCOptionsNFTContract } from '../../../contracts/useContract';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { AppContext } from '../../../context/App';\nimport { timeToMaturity } from '../../../utils';\nimport { Alert } from 'reactstrap';\nimport { WalletContext } from '../../../context/Wallet';\nimport { truncateEtherValue } from '../../../utils';\n\nfunction AutoExerciseModal(props) {\n    const app = useContext(AppContext);\n    const wallet = useContext(WalletContext);\n    const {account} = wallet.context;\n\n    const hegicBot = useHegicBotContract();\n    const ethNFTOptions = useHegicETHOptionsNFTContract();\n    const wbtcNFTOptions = useHegicWBTCOptionsNFTContract();\n    \n    const asset = props.provider == wbtcNFTOptions.address ? \"WBTC\" : \"ETH\";\n    const nftProvider = props.provider == wbtcNFTOptions.address ? wbtcNFTOptions : ethNFTOptions;\n    const decimals = props.provider == wbtcNFTOptions.address ? 8 : 18;\n\n    const [autoExerciseButtonDisabled, setAutoExerciseButtonDisabled] = useState(true);\n    const [hegicBotApproved, setHegicBotApproved] = useState(false);\n    const [targetPrice, setTargetPrice] = useState();\n    const [expectedProfit, setExpectedProfit] = useState();\n\n    useEffect(() => {\n        setAutoExerciseButtonDisabled(false);\n        checkHegicBotApproved();\n        \n    }, []);\n\n    useEffect(() => {\n        if(!!targetPrice) calculateProfit();\n        else setExpectedProfit()\n    }, [targetPrice])\n\n    const checkHegicBotApproved = async () => {\n        setHegicBotApproved(await nftProvider.isApprovedForAll(account, hegicBot.address));\n    }\n\n    const calculateProfit = async () => {\n        if(targetPrice > 0){\n            const underlyingOptionParams = await nftProvider.getUnderlyingOptionParams(props.tokenId);\n            const strike = underlyingOptionParams.strike.toNumber();\n            const amount = ethers.utils.formatUnits(underlyingOptionParams.amount, decimals);\n            const optionType = props.optionType;\n            let profit = 0;\n            const tp = targetPrice*(1e8);\n\n            if(optionType == \"CALL\") {\n                profit = ((tp-strike)/tp)*amount;\n            } else if (optionType == \"PUT\") {\n                profit = (strike - tp)/tp*amount;\n            }\n\n            if(profit < 0) profit = 0;\n\n            if(profit > underlyingOptionParams.lockedAmount)\n                profit = underlyingOptionParams.lockedAmount;\n\n            setExpectedProfit(profit);\n        }\n        \n    }\n\n    const addToAutoExercise = async () => {\n        const txRequest = await hegicBot.track(props.tokenId, ethers.utils.parseUnits(targetPrice, 8));\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Add to auto-exercise\");\n    }\n\n    const approveOperator = async () => {\n        const txRequest = await nftProvider.setApprovalForAll(hegicBot.address, true);\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Approve\");\n    }\n    \n    return (\n        <>\n            <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader><h4>Auto-exerciser</h4></ModalHeader>\n            <ModalBody>\n                Set a target price and your option will be exercised when that price is reached.\n                <br></br>\n                1. Approve Hegic Bot as operator of your options\n                <br></br>\n                2. Input a target price at which the option will be exercised\n                <br></br>\n                3. Press \"Track\"\n                <br></br>\n                { hegicBotApproved ? \n                    ( null )\n                     : \n                    (<Alert style={{textAlign:\"center\"}} color=\"info\">\n                        You need to approve the Hegic Bot to operate your options.<br></br>\n                        <Button className=\"main-button\" onClick={async () => await approveOperator(false)}>APPROVE</Button>\n                    </Alert>)\n                }\n                <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>EXPIRES IN</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input value={timeToMaturity(props.expiration)} disabled />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>OPTION TYPE</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input value={props.optionType} disabled />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>STRIKE (USD)</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input value={truncateEtherValue((props.strike || '').toString(), 2)} disabled />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>{asset} PRICE (USD)</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input value={truncateEtherValue((props.currentPrice/1e8).toString(), 2)} disabled />\n                </InputGroup>\n\n                <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>TARGET PRICE (USD)</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input placeholder='0' value={targetPrice} onChange={(event) => setTargetPrice(event.target.value)} />\n                </InputGroup>\n                {\n                    targetPrice > 0 ?\n                    (\n                        <span style={{marginTop:\"10px\"}}>\n                            Your option will be exercised when {asset} spot price reaches ${truncateEtherValue((targetPrice.toString()), 2)}.\n                            <br />\n                            Your P&L will be {expectedProfit}{asset}\n                        </span>\n                    ) : (null)\n                }\n                <Button size=\"sm\" className=\"main-button\" id=\"autoExerciseButton\" style={{height:'100%', width:'100%'}} disabled = {autoExerciseButtonDisabled} onClick={async () => await addToAutoExercise()}>TRACK</Button>\n                <span className='modalDescription'>\n                    Cost of exercising option: <br></br>\n                    Gas fees + keep3r (10% of gas fees) + 1% of profit\n                </span>\n            </ModalBody>\n            <ModalFooter>\n                    <Button className=\"secondary-button\" onClick={props.toggle}>CLOSE</Button>\n            </ModalFooter>\n            </Modal>\n        </>\n    )\n}\n\nexport default AutoExerciseModal;","import React, { useContext, useState, useEffect } from 'react';\nimport { useHegicETHOptionsNFTContract, useHegicWBTCOptionsNFTContract } from '../../../contracts/useContract';\nimport { Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { AppContext } from '../../../context/App';\n\nfunction DetokenizeModal(props) {\n    const tokenId = props.tokenId;\n    const app = useContext(AppContext);\n\n    const ethNFTOptions = useHegicETHOptionsNFTContract();\n    const wbtcNFTOptions = useHegicWBTCOptionsNFTContract();\n    \n    const nftProvider = props.provider == wbtcNFTOptions.address ? wbtcNFTOptions : ethNFTOptions;\n\n    const detokenize = async (burn) => {\n        const txRequest = await nftProvider.detokenizeOption(props.tokenId, burn);\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Detokenize Option\");\n    }\n    \n    return (\n        <>\n            <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader><h4>Detokenize Option</h4></ModalHeader>\n            <ModalBody>\n                If you detokenize the option, the Hegic option will no longer be held by an ERC721 token, removing most of its functionality.\n                The Hegic Option ownership will be transferred back to you from the ERC721 contract. You can always tokenize it again.\n                <Row>\n                    <Col md={{size:2}}>\n                        <Button className=\"main-button\" onClick={async () => await detokenize(false)}>DETOKENIZE</Button>\n                    </Col>\n                    <Col md={{size:8, offset: 2}}>\n                        <Button className=\"main-button warning\"  onClick={async () => await detokenize(true)}>DETOKENIZE AND BURN TOKEN</Button>\n                    </Col>\n                </Row>\n            </ModalBody>\n            <ModalFooter>\n                    <Button className=\"secondary-button\" onClick={props.toggle}>CLOSE</Button>\n            </ModalFooter>\n            </Modal>\n        </>\n    )\n}\n\nexport default DetokenizeModal;","import React, { useState, useEffect, useContext } from 'react';\nimport { ethers } from 'ethers'\nimport { useHegicETHOptionsNFTContract, useHegicBotContract, useHegicWBTCOptionsNFTContract, useHegicWBTCOptionsContract, useHegicETHOptionsContract, useWBTCUSDContract, useETHUSDContract } from '../../contracts/useContract';\nimport { timeToMaturity, truncateEtherValue } from '../../utils'\nimport { WalletContext } from '../../context/Wallet';\nimport { AppContext } from '../../context/App';\nimport TransferModal from './modals/transferModal'\nimport ExerciseModal from './modals/exerciseModal'\nimport AutoExerciseModal from './modals/autoExerciseModal'\nimport DetokenizeModal from './modals/detokenizeModal'\n\nfunction NFTItem(props) {\n    const app = useContext(AppContext);\n    const wallet = useContext(WalletContext);\n    const {account} = wallet.context\n    const wbtcNFTOptions = useHegicWBTCOptionsNFTContract();\n    const ethNFTOptions = useHegicETHOptionsNFTContract();\n    const wbtcOptions = useHegicWBTCOptionsContract();\n    const ethOptions = useHegicETHOptionsContract();\n    const ethusdPriceProvider = useETHUSDContract();\n    const wbtcusdPriceProvider = useWBTCUSDContract();\n    const hegicBot = useHegicBotContract();\n\n    const tokenId = props.tokenId;\n    \n    const decimals = props.provider == wbtcNFTOptions.address ? 8 : 18;\n    const asset = props.provider == wbtcNFTOptions.address ? \"WBTC\" : \"ETH\";\n    const nftProvider = props.provider == wbtcNFTOptions.address ? wbtcNFTOptions : ethNFTOptions;\n    const optionsProvider = props.provider == wbtcNFTOptions.address ? wbtcOptions : ethOptions;\n    const priceProvider = props.provider == wbtcNFTOptions.address ?  wbtcusdPriceProvider : ethusdPriceProvider;\n\n    const [underlyingOptionParams, setUnderlyingOptionParams] = useState();\n    const [amount, setAmount] = useState();\n    const [strike, setStrike] = useState();\n    const [expiration, setExpiration] = useState();\n    const [isValid, setIsValid] = useState(false);\n    const [currentProfit, setCurrentProfit] = useState(0);\n    const [currentPrice, setCurrentPrice] = useState(0);\n    const [optionId, setOptionId] = useState(0);\n    const [optionType, setOptionType] = useState(0);\n    const [owner, setOwner] = useState();\n\n    useEffect(() => {\n        retrieveOptionParams(props.tokenId);\n        getOwner();\n    }, [])\n\n    useEffect(() => {\n        getCurrentProfit();\n    }, [underlyingOptionParams])\n\n    const getOwner = async () => {\n        setOwner(await nftProvider.ownerOf(tokenId));\n    }\n\n    const getCurrentProfit = async () => {\n        if(underlyingOptionParams){\n            const strike = underlyingOptionParams.strike.toNumber();\n            const amount = ethers.utils.formatUnits(underlyingOptionParams.amount, decimals)\n            const cp = await priceProvider.latestRoundData().then(x => x.answer.toNumber());\n            const optionType = underlyingOptionParams.optionType == 1 ? \"PUT\" : \"CALL\";\n            setCurrentPrice(cp);\n            setOptionType(optionType);\n            let profit = 0;\n            console.log(\"optionType\", optionType)\n            if(optionType == \"CALL\") {\n                profit = ((cp-strike)/cp)*amount;\n            } else if (optionType == \"PUT\") {\n                profit = (strike - cp)/cp*amount;\n            }\n\n            if(profit < 0) profit = 0;\n    \n            if(profit > underlyingOptionParams.lockedAmount)\n                profit = underlyingOptionParams.lockedAmount;\n\n            setCurrentProfit(profit);\n        }\n    }\n\n    const retrieveOptionParams = async () => {\n        const uop = await nftProvider.getUnderlyingOptionParams(tokenId);\n        setUnderlyingOptionParams(uop);\n        setAmount(ethers.utils.formatUnits(uop.amount, decimals));\n        setOptionId(await nftProvider.getUnderlyingOptionId(tokenId).then(x=>x.toNumber()));\n        setStrike(ethers.utils.formatUnits(uop.strike, 8));\n        setExpiration(uop.expiration);\n        setIsValid(uop.holder == nftProvider.address);\n    }\n\n    const transferOwnership = async () => {\n        const optionId = await nftProvider.getUnderlyingOptionId(tokenId);\n        const txRequest = await optionsProvider.transfer(optionId, nftProvider.address);\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Transfer Ownership\");\n\n    }\n\n    const [showTransferModal, setShowTransferModal] = useState(false);\n    const [showExerciseModal, setShowExerciseModal] = useState(false);\n    const [showAutoExerciseModal, setShowAutoExerciseModal] = useState(false);\n    const [showDetokenizeModal, setShowDetokenizeModal] = useState(false);\n\n\n    const toggleExercise = () => {\n        setShowExerciseModal(!showExerciseModal);\n    }\n\n    const toggleAutoExercise = () => {\n        setShowAutoExerciseModal(!showAutoExerciseModal);\n    }\n\n    const toggleSell = () => {\n    }\n\n    const toggleTransfer = () => {\n        setShowTransferModal(!showTransferModal);\n    }\n\n    const toggleDetokenize = () => {\n        setShowDetokenizeModal(!showDetokenizeModal);\n    }\n\n    const untrackToken = async () => {\n        const txRequest = await hegicBot.untrack(props.trackedTokenId);\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Untrack token\");\n    }\n\n    return (\n    <tr style={{textAlign:'center'}}>\n        <th scope=\"row\">{asset+'['+optionId+']'}</th>\n        <th>{tokenId.toString()}</th>\n        <td>{optionType}</td>\n        <td>{amount}</td>\n        <td>${truncateEtherValue(strike || '',2)}</td>\n        <td>{!!expiration ? (underlyingOptionParams.state == 2 ? ('EXERCISED') : timeToMaturity(expiration)) :(null)}</td> \n        { \n            isValid ? \n                ( owner == account ? \n                    (<>\n                        { underlyingOptionParams.state == 2 || timeToMaturity(expiration) == 'EXPIRED' ? \n                            (<>\n                                <td>-</td>\n                                <td>-</td>\n                                <td>👀</td>\n                            </>)\n                            :\n                            (<>\n                                <td><a href=\"#\" onClick={toggleExercise}>EXERCISE</a></td>\n                                <td><a href=\"#\" onClick={toggleAutoExercise}>SET TARGET PRICE</a></td>                        <td><a href=\"#\" onClick={() => {}}>👀</a></td>\n                            </>)\n                        }\n                        <td><a href=\"#\" onClick={toggleTransfer}>TRANSFER</a></td>\n                        <td><a href=\"#\" onClick={toggleDetokenize}>DETOKENIZE</a></td>\n                    </>) \n                    :\n                    (<>\n                        <td><a href=\"#\"></a></td>\n                        <td><a href=\"#\" onClick={untrackToken}>UNTRACK TOKEN</a></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>                        \n                    </>\n                    )\n                ) \n            :\n                (<td><a href=\"#\" onClick={async () => await transferOwnership(tokenId)}>TRANSFER OWNERSHIP</a></td>)\n        }\n        <TransferModal modal={showTransferModal} toggle={toggleTransfer} provider={props.provider} tokenId={tokenId}/>\n        <DetokenizeModal modal={showDetokenizeModal} toggle={toggleDetokenize} tokenId={tokenId} provider={props.provider}/>\n        <ExerciseModal modal={showExerciseModal} \n            toggle={toggleExercise}\n            provider={props.provider}\n            tokenId={tokenId}\n            currentPrice={currentPrice}\n            currentProfit={currentProfit}\n            expiration={expiration}\n        />\n        <AutoExerciseModal modal={showAutoExerciseModal} \n            toggle={toggleAutoExercise}\n            provider={props.provider}\n            tokenId={tokenId}\n            optionType={optionType}\n            strike={strike}\n            currentPrice={currentPrice}\n            currentProfit={currentProfit}\n            expiration={expiration}\n        />\n    </tr>\n    )\n}\n\nexport default NFTItem;","import React, { useContext, useEffect, useState } from 'react';\nimport { Table } from 'reactstrap'\nimport { WalletContext } from '../../context/Wallet';\nimport NFTItem from './NFTItem';\n\nfunction NFTList() {\n\n    const wallet = useContext(WalletContext);\n    const { account, library, chainId } = wallet.context;\n\n    const [rows, setRows] = useState([\n    ]);\n\n    useEffect(() => {\n        updateRows();\n    }, [wallet.options])\n\n    const updateRows = async () => {\n        const optionItems = await Promise.all(wallet.options.nft.value.map(async (o) => {\n            return (\n            <NFTItem\n             key={o.index+'-'+o.provider}\n             id={o.index}\n             provider={o.provider}\n             tokenId={o.tokenId} \n             trackedTokenId={o.trackedTokenId || 0}\n             />\n            )\n        }));\n\n        setRows(optionItems)\n    }\n    if(wallet.options.nft.value.length != 0) {\n        return (<Table size='sm' style={{color: \"white\", fontSize:'12px'}}>\n        <thead>\n            <tr style={{textAlign:'center'}}>\n                <th>#</th>\n                <th>TokenId</th>\n                <th>Type</th>\n                <th>Size</th>\n                <th>Strike</th>\n                <th>Expires in</th>\n                <th>Exercise</th>\n                <th>Auto-exerciser</th>\n                <th>Sell</th>\n                <th>Transfer</th>\n                <th>Detokenize</th>\n            </tr>\n        </thead>\n        <tbody>\n            {rows}\n        </tbody>\n    </Table>)\n    } else {\n        return <span style={{margin:'25px', textAlign:'center', color:'#667fcc'}}>You have 0 tokenized options.<br/> Start by buying a tokenized option or tokenize one you already own.</span>\n    }\n    \n}\n\nexport default NFTList;","import React, { useContext } from 'react';\nimport { ethers } from 'ethers'\nimport { useHegicWBTCOptionsContract, useHegicWBTCOptionsNFTContract, useHegicETHOptionsNFTContract } from '../../contracts/useContract';\nimport { timeToMaturity, truncateEtherValue } from '../../utils'\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { WalletContext } from '../../context/Wallet';\nimport { AppContext } from '../../context/App';\n\nfunction OptionItem(props) {\n    const app = useContext(AppContext)\n    const wallet = useContext(WalletContext);\n    const { account } = wallet.context;\n    const wbtcOptions = useHegicWBTCOptionsContract();\n    const wbtcNFTOptions = useHegicWBTCOptionsNFTContract();\n    const ethNFTOptions = useHegicETHOptionsNFTContract();\n\n    const id = props.id;\n    const decimals = props.provider == wbtcOptions.address ? 8 : 18;\n    const asset = props.provider == wbtcOptions.address ? \"WBTC\" : \"ETH\";\n    const optionType = props.optionType == 1 ? \"PUT\" : \"CALL\";\n    const nftProvider = props.provider == wbtcOptions.address ? wbtcNFTOptions : ethNFTOptions;\n\n    const amount = ethers.utils.formatUnits(props.amount, decimals);\n    const strike = ethers.utils.formatUnits(props.strike, 8);\n\n    const tokenize = async (id) => {\n        const txRequest = await nftProvider.tokenizeOption(id, account);\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Tokenize\");\n        app.updateData();\n    }\n\n    return (\n    <tr>\n        <th scope=\"row\">{asset+'['+id+']'}</th>\n        <td>{optionType}</td>\n        <td>{amount}</td>\n        <td>${truncateEtherValue(strike, 2)}</td>\n        <td>{timeToMaturity(props.expiration)}</td> \n        <td><a href=\"#\" id=\"tokenizeLink\" onClick={async () => await tokenize(id)}>TOKENIZE</a>\n        <UncontrolledTooltip placement=\"right\" target=\"tokenizeLink\">\n            You will need to transfer option's ownership to this contract AFTER tokenizing\n      </UncontrolledTooltip></td>\n    </tr>\n    )\n}\n\nexport default OptionItem;","import React, { useContext, useEffect, useState } from 'react';\nimport { Table } from 'reactstrap'\nimport { WalletContext } from '../../context/Wallet';\nimport OptionItem from './optionItem';\n\nfunction OptionsList() {\n\n    const wallet = useContext(WalletContext);\n    const { account, library, chainId } = wallet.context;\n\n    const [rows, setRows] = useState([\n    ]);\n\n    useEffect(() => {\n        updateRows();\n    }, [wallet.options])\n\n    const updateRows = async () => {\n        const optionItems = await Promise.all(wallet.options.hegic.value.map(async (o) => {\n            return (\n            <OptionItem\n             key={o.index+'-'+o.provider}\n             id={o.index}\n             holder={o.holder}\n             amount={o.amount}\n             provider={o.provider}\n             strike={o.strike}\n             expiration={o.expiration} \n             optionType={o.optionType}\n             state={o.state} />\n            )\n        }));\n\n        if(optionItems.length == 0){\n            optionItems.push(\n                <tr key=\"noOptionsHegic\" style={{textAlign:\"center\", width:'100%'}}>\n                    <th>\n                        <h6>No options found</h6>\n                    </th>\n                </tr>\n            )\n}\n        setRows(optionItems)\n    }\n\n    if(wallet.options.hegic.value.length > 0){\n        return (<Table style={{color: \"white\", fontSize:'12px', textAlign:'center'}}>\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Type</th>\n                    <th>Size</th>\n                    <th>Strike</th>\n                    <th>Maturity</th>\n                    <th>Tokenize</th>\n                </tr>\n            </thead>\n            <tbody>\n                {rows}\n            </tbody>\n        </Table>)\n    } else {\n        return (\n            <span style={{margin:'25px', textAlign:'center', color:'#667fcc'}}>\n                You have 0 Hegic options. <br></br>\n                You can buy an already tokenized option here.\n            </span>\n        )\n    }\n}\n\nexport default OptionsList;","import React, { useState } from 'react';\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\nimport OptionsList from '../yourOptions/optionsList';\n\nfunction Tokenizer() {\n    const [showTokenizerModal, setShowTokenizerModal] = useState(false);\n\n    const toggleTokenizer = () => {\n        setShowTokenizerModal(!showTokenizerModal);\n    }\n\n    return (\n        <>\n            <Button className=\"main-button\" onClick={toggleTokenizer}>TOKENIZE OPTIONS</Button>\n            <TokenizerModal modal={showTokenizerModal} toggle={toggleTokenizer} />\n        </>\n    )\n}\n\nfunction TokenizerModal(props) {\n    \n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n        <ModalHeader><h4>Tokenize your Hegic Options</h4></ModalHeader>\n        <ModalBody>\n            <span>\n                Here you will see your options purchased at Hegic.co<br></br>\n                Clicking tokenize will mint an ERC721 token. In order for it to be valid, you need to transfer option's ownership to that token.<br></br>\n            </span>\n            <OptionsList></OptionsList>\n        </ModalBody>\n        <ModalFooter>\n                <Button className=\"secondary-button\" onClick={props.toggle}>CLOSE</Button>\n        </ModalFooter>\n        </Modal>\n    )\n}\n\nexport default Tokenizer;","import React, { useEffect, useState, useContext } from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { useETHUSDContract, useWBTCUSDContract, useHegicETHOptionsNFTContract, useHegicWBTCOptionsNFTContract } from '../../contracts/useContract'\nimport { truncateEtherValue } from '../../utils'\nimport { ethers } from 'ethers'\n\nimport { AppContext } from '../../context/App';\nimport { WalletContext } from '../../context/Wallet';\n\nfunction OptionSeller() {\n    const [showOptionSellerModal, setShowOptionSellerModal] = useState(false);\n\n    const toggleOptionSeller = () => {\n        setShowOptionSellerModal(!showOptionSellerModal);\n    }\n\n    return (\n        <>\n            <Button className=\"main-button\" onClick={toggleOptionSeller}>BUY OPTIONS</Button>\n            <OptionSellerModal modal={showOptionSellerModal} toggle={toggleOptionSeller} />\n        </>\n    )\n}\n\nfunction OptionSellerModal(props) {\n    const app = useContext(AppContext);\n    const wallet = useContext(WalletContext);\n    const {account} = wallet.context;\n\n    const ethusdPriceProvider = useETHUSDContract();\n    const wbtcusdPriceProvider = useWBTCUSDContract();\n    const ethNFTOptions = useHegicETHOptionsNFTContract();\n    const wbtcNFTOptions = useHegicWBTCOptionsNFTContract();\n\n    const [asset, setAsset] = useState('ETH');\n    const [strike, setStrike] = useState();\n    const [optionType, setOptionType] = useState('PUT');\n    const [size, setSize] = useState(1);\n    const [period, setPeriod] = useState(86400);\n    const [priceProvider, setPriceProvider] = useState(ethusdPriceProvider);\n    const [optionCost, setOptionCost] = useState();\n    const [isBuyButtonDisabled, setIsBuyButtonDisabled] = useState(true);\n    useEffect(() => {\n        if(asset == 'ETH') setPriceProvider(ethusdPriceProvider);\n        else setPriceProvider(wbtcusdPriceProvider);\n\n        updateCurrentPrice();\n    }, [asset]);\n\n    useEffect(() => {\n        if(!!asset && !!optionType && !!size && !!strike && !!period)\n            getOptionCost();\n        else setOptionCost()\n    }, [asset, optionType, size, strike, period])\n\n    useEffect(() => {\n            setIsBuyButtonDisabled(!optionCost);\n    }, [optionCost])\n\n    const updateCurrentPrice = async () => {\n        const cp = await priceProvider.latestRoundData();\n        setStrike(truncateEtherValue(ethers.utils.formatUnits(cp.answer, 8),2));\n    }\n\n    const getOptionCost = async () => {\n        const _optionsProvider = asset == 'ETH' ? ethNFTOptions : wbtcNFTOptions;\n        const _optionType = optionType == 'PUT' ? ethers.BigNumber.from('1') : ethers.BigNumber.from('2');\n        const decimals = asset == 'ETH' ? 18 : 8;\n        const _size = ethers.utils.parseUnits(size.toString(), decimals);\n        const _strike = ethers.utils.parseUnits(strike.toString(), 8);\n        const _period = ethers.BigNumber.from(period.toString());\n\n        setOptionCost(await _optionsProvider.getOptionCostETH(_period, _size, _strike, _optionType));\n    }\n\n    const buyOption = async () => {\n        const _optionsProvider = asset == 'ETH' ? ethNFTOptions : wbtcNFTOptions;\n        const _optionType = optionType == 'PUT' ? ethers.BigNumber.from('1') : ethers.BigNumber.from('2');\n        const decimals = asset == 'ETH' ? 18 : 8;\n        const _size = ethers.utils.parseUnits(size.toString(), decimals);\n        const _strike = ethers.utils.parseUnits(strike.toString(), 8);\n        const _period = ethers.BigNumber.from(period.toString());\n\n        const txRequest = await _optionsProvider.createOption(_period, _size, _strike, _optionType, account, {from: account, value:optionCost});\n        await app.updateAndWait(app.updateStatusMsg, txRequest, \"Buy Option\");\n\n    }\n\n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n        <ModalHeader><h4>Buy your tokenized Hegic option </h4></ModalHeader>\n        <ModalBody>\n            <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>ASSET</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input type=\"select\" placeholder='0' value={asset} onChange={(event) => setAsset(event.target.value)}>\n                        <option>ETH</option>\n                        {/* <option>WBTC</option> */}\n                    </Input>\n            </InputGroup>\n            <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>OPTION TYPE</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input type=\"select\" placeholder='0' value={optionType} onChange={(event) => setOptionType(event.target.value)}>\n                        <option>PUT</option>\n                        <option>CALL</option>\n                    </Input>\n            </InputGroup>\n            <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>SIZE ({asset})</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input placeholder='0' value={size} onChange={(event) => setSize(event.target.value)} />\n            </InputGroup>\n            <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>STRIKE (USD)</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input placeholder='' value={strike} onChange={(event) => setStrike(event.target.value)} />\n            </InputGroup>\n            <InputGroup size=\"sm\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText style={{minWidth:'150px'}}>PERIOD</InputGroupText>\n                    </InputGroupAddon>  \n                    <Input type=\"select\" placeholder='0' value={period} onChange={(event) => setPeriod(event.target.value)}>\n                        <option value=\"86400\">1 DAY</option>\n                        <option value=\"604800\">1 WEEK (7 DAYS)</option>\n                        <option value=\"1209600\">2 WEEKS (14 DAYS)</option>\n                        <option value=\"1814400\">3 WEEKS (21 DAYS)</option>\n                        <option value=\"2419200\">4 WEEKS (28 DAYS)</option>\n                    </Input>            \n            </InputGroup>\n            { optionCost ? \n                (<span>\n                    Your option cost: {truncateEtherValue(ethers.utils.formatEther(optionCost),4)}ETH\n                </span>) : (null)\n            }   \n            <Button size=\"sm\" className=\"main-button\" id=\"autoExerciseButton\" style={{height:'100%', width:'100%'}} onClick={buyOption} disabled={isBuyButtonDisabled}>BUY OPTION</Button>\n        </ModalBody>\n        <ModalFooter>\n                <Button className=\"secondary-button\" onClick={props.toggle}>CLOSE</Button>\n        </ModalFooter>\n        </Modal>\n    )\n}\n\nexport default OptionSeller;","import React from 'react';\nimport {Card, Row, Col} from 'reactstrap'\nimport NFTList from './NFTList';\nimport Tokenizer from '../tokenizer';\nimport OptionSeller from '../optionSeller';\n\nfunction YourNFTOptions() {\n    return (\n        <Card body style={{padding:'15px', minHeight:'250px', maxHeight:'70vh'}}>\n            <h3 style={{color:'#45fff4'}}>Your options portfolio</h3>\n            <span>\n                Manage your tokenized options: exercise, transfer or detokenize your options\n            </span>\n            <NFTList/>\n            <div style={{marginTop:'15px', textAlign:'center'}}>\n                <h6>Get more tokenized options</h6>\n                <Row>\n                    <Col md={{offset:3, size: 3}} style={{padding:\"10px\", textAlign:'center'}}>\n                        <Tokenizer/>\n                    </Col>\n                    <Col md={{size: 3}} style={{padding:\"10px\", textAlign:'center'}}>\n                        <OptionSeller/>\n                    </Col>\n                </Row>\n            </div>\n            \n        </Card>\n    )\n}\n\nexport default YourNFTOptions;","import React from 'react'\nimport { Container, Row, Col, Alert } from 'reactstrap'\nimport YourNFTOptions from './yourNFTOptions/index';\nimport Tokenizer from './tokenizer';\nimport OptionSeller from './optionSeller';\n\n\n\nfunction Dashboard() {\n  return (\n    <Container style={{minHeight:'100%', paddingBottom:'60px', marginTop:'-58px', paddingTop:'58px', marginBottom:'-60px'}}>\n      <Alert color=\"warning\" style={{textAlign:'center', margin:'20px'}}>\n        ALPHA VERSION: Being tested with ETH options.\n        Use at your own risk.\n      </Alert>\n      <Row style={{marginTop:'20px'}}>\n        <Col md={{offset:1, size: 10}} style={{padding:\"10px\"}}>\n          <YourNFTOptions/>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Dashboard;","import React, { useEffect, useContext } from 'react'\n// import { useWeb3React } from '@web3-react/core'\nimport { Badge, Button, Col, Navbar} from 'reactstrap';\nimport { truncateAddress, truncateEtherValue, formatBN } from '../utils'\nimport { WalletContext } from '../context/Wallet'\nimport { useHegicBotContract, useHegicETHOptionsContract, useHegicWBTCOptionsContract, useHegicETHOptionsNFTContract, useHegicWBTCOptionsNFTContract } from '../contracts/useContract';\nimport { AppContext } from '../context/App';\n\nfunction Header(props) {\n    const app = useContext(AppContext)\n    const wallet = useContext(WalletContext);\n    const { account, library, chainId, active } = wallet.context;\n\n    const nftETHOptions = useHegicETHOptionsNFTContract();\n    const nftWBTCOptions = useHegicWBTCOptionsNFTContract();\n    const ethOptions = useHegicETHOptionsContract();\n    const wbtcOptions = useHegicWBTCOptionsContract();\n    const hegicBotETH = useHegicBotContract();\n\n    const updateMyOptions = async () => {\n        const myOptions = []\n        const alreadyInOptionIds = [];\n\n        // const optionProviders = [ethOptions, wbtcOptions];\n        const optionProviders = [ethOptions];\n        for(const op of optionProviders) {\n            const filter = op.filters.Create(null, account);\n            const events = await op.queryFilter(filter);\n            await Promise.all(events.map(async (x) => {\n                const option = await op.options(x.args.id);\n                // console.log(\"Expiration: \", option.expiration.toNumber())\n                // console.log(\"Now: \", new Date().getTime()/1000)\n                // console.log(\"Id\", x.args.id.toNumber(), \"result: \", option.expiration.toNumber() >= new Date().getTime()/1000)\n                if(option.holder == account && !alreadyInOptionIds.includes(x.args.id.toNumber()) && option.state == 1 && option.expiration.toNumber() >= new Date().getTime()/1000){\n                    myOptions.push({index: x.args.id.toNumber(), provider: op.address , ...option})\n                    alreadyInOptionIds.push(x.args.id.toNumber())\n                }\n            }))\n        }\n\n        // detokenized options: options created using NFT contract but that are now owned by the user\n        const nftOptionProviders = [nftETHOptions, nftWBTCOptions];\n        for(const nop of nftOptionProviders) {\n            const filter2 = nop.filters.Detokenized(account, null);\n            const events2 = await nop.queryFilter(filter2);\n            await Promise.all(events2.map(async (x) => {\n                const op = await nop.optionsProvider();\n                const option = await nop.getUnderlyingOptionParams(x.args.tokenId);\n                const optionId = await nop.getUnderlyingOptionId(x.args.tokenId);\n                if(option.holder == account && !alreadyInOptionIds.includes(optionId.toNumber()) && option.state == 1 && option.expiration.toNumber() >= new Date().getTime()/1000){\n                    myOptions.push({index: optionId.toNumber(), provider: op , ...option})\n                    alreadyInOptionIds.push(optionId.toNumber())\n                }\n            }))       \n         }\n\n        wallet.options.hegic.setValue(myOptions);\n    }\n\n    const updateMyNFTOptions = async () => {\n        const myNFTOptions = [];\n        const nftProviders = [nftETHOptions, nftWBTCOptions];\n        let index = 0;\n        for(const np of nftProviders){\n            const ownedTokens = await np.balanceOf(account).then(x => x.toNumber());\n            while(index < ownedTokens){\n                try {\n                    myNFTOptions.push({index, provider: np.address, tokenId: await np.tokenOfOwnerByIndex(account, index)});\n                    index++;\n                }catch(error){\n                    break;\n                }\n            }\n            index = 0;\n        }\n\n        index = 0;\n\n        const hegicBots = [hegicBotETH];\n        for(const hb of hegicBots){\n            const filter = hb.filters.TokenTracked();\n            const events = await hb.queryFilter(filter);\n            await Promise.all(events.map(async (x) => {\n                const trackedToken = await hb.trackedTokens(x.args.trackedTokenId);\n                if(trackedToken.owner==account){\n                    myNFTOptions.push({\n                        trackedTokenId:x.args.trackedTokenId,\n                        provider: nftETHOptions,\n                        tokenId: trackedToken.tokenId\n                    });\n                }\n            }))\n        }\n        \n        wallet.options.nft.setValue(myNFTOptions);\n    }\n\n    useEffect(() => {\n        if(!!account && !!library && app.reload) {\n            library.getBalance(account).then((balance) => {\n                wallet.balances.ETHBalance.setValue(balance)\n            });\n\n            updateMyOptions();\n\n            updateMyNFTOptions();\n            app.updateData();\n        }\n    }, [account, library, chainId, app.reload])\n\n    const Wallet = () => {\n        return (\n            <>\n                <Col sm='0' md={{size:2, offset:5}} style={{display:'flex', justifyContent:'center'}}>\n                    <h3 style={{color:'#45fff4', zIndex:'99', fontFamily:'Jura', fontWeight:'bold'}}>HEGIC<span style={{color:\"white\"}}>:TOKENIZER</span></h3>\n                </Col>\n                <Col sm='12' md={{size:5, offset:0}} style={{display:'flex', justifyContent:'flex-end'}}>\n                { active ? (\n                    <div>\n                        <Badge color=\"primary\" style={{margin:\"2.5px\"}}>{truncateEtherValue(formatBN(wallet.balances.HEGICBalance.value),2)} HEGIC </Badge>\n                        <Badge color=\"secondary\" style={{margin:\"2.5px\"}}>{truncateEtherValue(formatBN(wallet.balances.ETHBalance.value),4)} ETH </Badge>\n                        <span style={{color:'#defefe', fontSize:'12px'}}>{truncateAddress(account)}</span>\n                        <Button color=\"link\" onClick={wallet.disconnect}>Disconnect</Button>\n                    </div>\n                ) : (\n                    <Button color=\"link\" onClick={wallet.connect}>Connect</Button>\n                )}\n                </Col>\n            </>\n        )\n    }\n    \n    return (\n            <Navbar style={{display:'flex', backgroundColor:'#19274d', borderBottom: '1px solid #45fff4'}}>\n                <Wallet />\n            </Navbar>\n    );\n}\n\nexport default Header;","import React, { useContext } from 'react';\nimport { Row, Container, Col, Button } from 'reactstrap';\nimport { WalletContext } from '../context/Wallet';\n\nfunction Intro(props) {\n    const connect = useContext(WalletContext).connect\n    return (\n    <Container style={{minHeight:'100%', paddingBottom:'60px', marginTop:'-58px', paddingTop:'58px', marginBottom:'-60px'}}>\n        <Row style={{marginTop:'10vh', minHeight:'50vh', zIndex:'-1', textAlign:'center'}}>\n            <Col sm='12' md={{ size: 6, offset: 3}}>\n                    <h1 style={{\n                        color:'#45fff4',\n                        fontFamily:'Jura',\n                        fontWeight:'bold',\n                        lineHeight:'125%',\n                        fontSize:'46px',\n                        textTransform:'uppercase'\n                        }}>Hegic Options: tokenized</h1>\n                    <div style={{color: '#defefe', fontFamily:'Exo 2', fontWeight:'500', lineHeight:'150%'}}>\n                    </div>\n                    <div style={{marginTop:'25px', display:'flex', justifyContent:'center'}}>\n                    <Button style={{\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} \n                        onClick={connect}>CONNECT WALLET</Button>\n                    </div>\n            </Col>\n        </Row>\n    </Container>);\n}\n\nexport default Intro;","import React from 'react';\nimport {Row, Col} from 'reactstrap'\nfunction Footer() {\n    return (\n        <div style={{height:'60px', position:'relative', color:'#defefe', textAlign:'center'}}>\n            <Row style={{display:'flex', justifyContent:'middle', flexDirection:'row', verticalAlign:'center'}}>\n                <Col md={{size:2, offset:3}}>\n                    <a href=\"https://jmonteer.medium.com/\" target=\"_blank\">About</a>\n                </Col>\n                <Col md={{size:2}}>\n                    By <a href=\"https://twitter.com/jmonteer23\" target=\"_blank\">@jmonteer23</a>\n                </Col>\n                <Col md={{size:2}}>\n                    <a href=\"https://twitter.com/messages/compose?recipient_id=1302979429820502016\" target=\"_blank\">Feedback</a>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default Footer;","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42, 1337] })\n","import React, { useContext, useState } from 'react'\nimport { Toast, ToastHeader, ToastBody, Spinner, Button} from 'reactstrap'\nimport { AppContext } from '../../context/App'\n\nfunction StatusMsg() {\n    const app = useContext(AppContext)\n\n    return (\n        <>\n            <div className='statusMessage'>\n                <Toast isOpen={app.statusMsg != \"\"}>\n                    <ToastHeader icon={<Spinner size=\"sm\" />}>\n                        { app.statusMsgTitle }\n                    </ToastHeader>\n                    <ToastBody>\n                        { app.statusMsg }\n                        <br></br>\n                        <br></br>\n                        <Button size=\"sm\" className=\"secondary-button\" onClick={() => app.updateStatusMsg(\"\",\"\")}>CLOSE</Button>\n                    </ToastBody>\n                </Toast>\n            </div>\n        </>\n    )\n}\n\nexport default StatusMsg;","import React, { useState, useEffect, useContext } from 'react';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header'\nimport Intro from './components/intro'\nimport Footer from './components/footer'\nimport {Alert} from 'reactstrap'\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core'\nimport { ethers } from 'ethers';\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { injected } from './connectors';\nimport { WalletContext } from './context/Wallet';\nimport { AppContext } from './context/App';\nimport StatusMsg from './components/statusMsg';\n\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider)\n}\n\nfunction App() {\n  const [ETHBalance, setETHBalance] = useState(ethers.BigNumber.from('0'));\n  const [HEGICBalance, setHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  const [HEGICAllowance, setHEGICAllowance] = useState(ethers.BigNumber.from('0'));\n  const [myOptions, setMyOptions] = useState([]);\n  const [myNFT, setMyNFT] = useState([])\n  const [statusMsg, setStatusMsg] = useState(\"\");\n  const [statusMsgTitle, setStatusMsgTitle] = useState(\"\");\n  const [reload, setReload] = useState(true);\n\n  const balances = {\n    ETHBalance: {value: ETHBalance, setValue: setETHBalance},\n    HEGICBalance: {value: HEGICBalance, setValue: setHEGICBalance},\n  }\n\n  const allowances = {\n    HEGICAllowance: {value: HEGICAllowance, setValue: setHEGICAllowance}\n  }\n\n  const options = {\n    hegic: { value: myOptions, setValue: setMyOptions },\n    nft: { value: myNFT, setValue: setMyNFT }\n  }\n\n  const context = useWeb3React()\n  const { connector, active, activate, deactivate } = context\n  \n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState()\n  useEffect(() => {\n  if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n  }\n  }, [activatingConnector, connector])\n  \n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n  \n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n  \n  function connect() {\n      setActivatingConnector(injected)\n      activate(injected)\n  }\n  \n  function disconnect() {\n  deactivate(injected)\n  }\n\n  const updateData = () => setReload(!reload);\n\n  const updateStatusMsg = (title, message) => {\n    setStatusMsgTitle(title);\n    setStatusMsg(message);\n  }\n  const updateAndWait = async (updateStatusMsg, txRequest, from) => {\n    const title = (<bold>{from}: Pending transaction </bold>)\n    const message = (\n      <>\n        <a target='_blank' href={`https://etherscan.io/tx/${txRequest.hash}`}>\n          See in etherscan\n        </a>\n      </>\n    )\n    updateStatusMsg(title, message);\n    await txRequest.wait();\n    updateStatusMsg(\"\", \"\");\n    updateData();\n  }\n\n  return (\n    <AppContext.Provider value={{statusMsgTitle, statusMsg, updateStatusMsg, updateAndWait, reload, updateData}}>\n      <WalletContext.Provider value={{context, connect, disconnect, balances, allowances, options}}>\n        <div style={{ background:'radial-gradient(68.28% 53.52% at 50% 50%, #1c2a4f 0%, #111b35 100%)'}}>\n            <div style={{backgroundImage:'url(https://www.hegic.co/assets/img/background-image.svg)', height:'100vh'}}>\n                <Header />\n                { active ? (\n                  <Dashboard />\n                ) : (\n                  <Intro />\n                )}\n                {/* <Stats /> */}\n                <Footer />\n                <StatusMsg></StatusMsg>\n            </div>\n        </div>\n      </WalletContext.Provider>\n  </AppContext.Provider>\n  );\n}\n\n\nexport default () => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n  </Web3ReactProvider>\n)\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n  \n  export function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect(() => {\n      const { ethereum } = window\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n        <script src=\"https://cdn.usefathom.com/script.js\" data-site=\"GKKLPULC\" defer></script>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}